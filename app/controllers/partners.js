import { Router } from 'express';
import { PrismaClient } from '@prisma/client';

const router = Router();
const prisma = new PrismaClient();

// üîπ –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
router.get('/', async (req, res) => {
  try {
    const partners = await prisma.partner.findMany();
    res.json(partners);
  } catch {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤' });
  }
});

// üîπ –û–¥–∏–Ω –ø–∞—Ä—Ç–Ω—ë—Ä
router.get('/:id', async (req, res) => {
  try {
    const id = Number(req.params.id);
    const partner = await prisma.partner.findUnique({ where: { id } });
    if (!partner) return res.status(404).json({ error: '–ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json(partner);
  } catch {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞' });
  }
});

// üîπ –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞
router.post('/', async (req, res) => {
  try {
    const { name, link, images = [] } = req.body;
    const created = await prisma.partner.create({
      data: { name, link, images },
    });
    res.status(201).json(created);
  } catch {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞' });
  }
});

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞
router.put('/:id', async (req, res) => {
  try {
    const id = Number(req.params.id);
    const { name, link, images = [] } = req.body;
    const updated = await prisma.partner.update({
      where: { id },
      data: { name, link, images },
    });
    res.json(updated);
  } catch {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞' });
  }
});

// üîπ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞
router.delete('/:id', async (req, res) => {
  try {
    const id = Number(req.params.id);
    await prisma.partner.delete({ where: { id } });
    res.json({ success: true });
  } catch {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞' });
  }
});

export default router;
